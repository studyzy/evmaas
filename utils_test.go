package evmaas

import (
	"encoding/hex"
	"testing"

	"github.com/0xPolygon/polygon-edge/types"
	"github.com/stretchr/testify/assert"
)

func TestDecodeInstallERC20Tx(t *testing.T) {
	//https://sepolia.etherscan.io/getRawTx?tx=0x88f035b81fb709554ae284b803c0a80df79a6d605790e8e73c62769c7a06ec6d
	//txHex := "f86b808512a05f200082520894cf1838b517247ebdfd0e6db3c00d386e45bb808d8711c37937e080008026a01c0883e251dd34a0b1864618ac73483f8ece1b619d97525fabd821a111c2a7e9a018342cda6471ac519e9a5034fc65b644afa2a78bcff84c88b48185429376c7e4"
	txHex := "02f90af783aa36a7808459682f008478c9ad588308650b8080b90a9b608060405234801562000010575f80fd5b5060405180604001604052806009815260200168213c22902a37b5b2b760b91b815250604051806040016040528060048152602001631096115560e21b8152508160039081620000619190620002a2565b506004620000708282620002a2565b506b033b2e3c9fd0803ce800000091506200008e9050338262000095565b5062000394565b6001600160a01b038216620000c45760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b620000d15f8383620000d5565b5050565b6001600160a01b03831662000103578060025f828254620000f791906200036e565b90915550620001759050565b6001600160a01b0383165f9081526020819052604090205481811015620001575760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000bb565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166200019357600280548290039055620001b1565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001f791815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200022d57607f821691505b6020821081036200024c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200029d57805f5260205f20601f840160051c81016020851015620002795750805b601f840160051c820191505b818110156200029a575f815560010162000285565b50505b505050565b81516001600160401b03811115620002be57620002be62000204565b620002d681620002cf845462000218565b8462000252565b602080601f8311600181146200030c575f8415620002f45750858301515b5f19600386901b1c1916600185901b17855562000366565b5f85815260208120601f198616915b828110156200033c578886015182559484019460019091019084016200031b565b50858210156200035a57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b808201808211156200038e57634e487b7160e01b5f52601160045260245ffd5b92915050565b6106f980620003a25f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c8063313ce56711610063578063313ce567146100fa57806370a082311461010957806395d89b4114610131578063a9059cbb14610139578063dd62ed3e1461014c575f80fd5b806306fdde0314610094578063095ea7b3146100b257806318160ddd146100d557806323b872dd146100e7575b5f80fd5b61009c610184565b6040516100a99190610553565b60405180910390f35b6100c56100c03660046105ba565b610214565b60405190151581526020016100a9565b6002545b6040519081526020016100a9565b6100c56100f53660046105e2565b61022d565b604051601281526020016100a9565b6100d961011736600461061b565b6001600160a01b03165f9081526020819052604090205490565b61009c610250565b6100c56101473660046105ba565b61025f565b6100d961015a36600461063b565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101939061066c565b80601f01602080910402602001604051908101604052809291908181526020018280546101bf9061066c565b801561020a5780601f106101e15761010080835404028352916020019161020a565b820191905f5260205f20905b8154815290600101906020018083116101ed57829003601f168201915b5050505050905090565b5f3361022181858561026c565b60019150505b92915050565b5f3361023a85828561027e565b6102458585856102fe565b506001949350505050565b6060600480546101939061066c565b5f336102218185856102fe565b610279838383600161035b565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f1981146102f857818110156102ea57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6102f884848484035f61035b565b50505050565b6001600160a01b03831661032757604051634b637e8f60e11b81525f60048201526024016102e1565b6001600160a01b0382166103505760405163ec442f0560e01b81525f60048201526024016102e1565b61027983838361042d565b6001600160a01b0384166103845760405163e602df0560e01b81525f60048201526024016102e1565b6001600160a01b0383166103ad57604051634a1406b160e11b81525f60048201526024016102e1565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156102f857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161041f91815260200190565b60405180910390a350505050565b6001600160a01b038316610457578060025f82825461044c91906106a4565b909155506104c79050565b6001600160a01b0383165f90815260208190526040902054818110156104a95760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102e1565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166104e357600280548290039055610501565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161054691815260200190565b60405180910390a3505050565b5f602080835283518060208501525f5b8181101561057f57858101830151858201604001528201610563565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105b5575f80fd5b919050565b5f80604083850312156105cb575f80fd5b6105d48361059f565b946020939093013593505050565b5f805f606084860312156105f4575f80fd5b6105fd8461059f565b925061060b6020850161059f565b9150604084013590509250925092565b5f6020828403121561062b575f80fd5b6106348261059f565b9392505050565b5f806040838503121561064c575f80fd5b6106558361059f565b91506106636020840161059f565b90509250929050565b600181811c9082168061068057607f821691505b60208210810361069e57634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561022757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220f5666ee2977cfc287dd47239209041ee600a8d7261beae57e885344c9e5f5ad264736f6c63430008180033c001a0d9b3db36580182d11ad0dc12d5ef1990300cb757ad4f724f6b3ce98e9c0a5e8ea04b02f88e75c79472a8582374a3ae7893bfc596a34212827b1f59ac0e03b44dcb"
	b, _ := hex.DecodeString(txHex)
	tx, err := DecodeTx(b)
	assert.NoError(t, err)
	assert.NotNil(t, tx)
	x := types.TransactionHashForkV2{}
	x.ComputeHash(tx)
	t.Logf("txHash:%s", tx.Hash)
	tx.R = nil
	tx.S = nil
	tx.V = nil
	unsignTx := tx.MarshalRLP()
	t.Logf("unsignTx: %x", unsignTx)
	//tx.R = nil
	//data, err := tx.RawRepresentation()

}
func TestGetContractAddr(t *testing.T) {
	txHash := "4d4f8783bdbdc32a7391f04da3b5321b2f6760b1cb99adf98a0a8ee93ceb7313"
	hash, _ := hex.DecodeString(txHash)
	addr := GetContractAddr(hash)
	t.Logf("contract address: %x", addr)
}
